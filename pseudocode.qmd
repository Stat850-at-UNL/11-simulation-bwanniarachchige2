---
title: "Pseudocode: Craps Simulation"
---

# Instructor Comments

I have scaffolded this set of instructions very carefully. 

Please proceed sequentially through this document, and do not move onto the next step until you have completed the present step.

My goal in this class is to teach you how to solve hard problems by breaking them down. 
This assignment is the culmination of that process, where you demonstrate that you have the tools to solve these hard problems. 

You WILL get confused and miss steps if you do not follow the instructions sequentially.

# Understanding the game flow

ChatGPT provides the following pseudocode for playing a game of craps. 
You can see the full script [here](deps/ChatGPT Pseudocode.html) (it goes a bit beyond pseudocode).

Note that this pseudocode seems to be relatively Pythonic. 
You will have the opportunity to write (somewhat different) pseudocode later, but for now, work with this pseudocode to develop an understanding of the game.

```{}
function playCraps():
    while true:
        // Roll the dice
        roll = rollDice()

        // Check the outcome of the roll
        if isComeOutRoll(roll):
            handleComeOutRoll(roll)
        else:
            handlePointRoll(roll)

        // Display current status and ask if the player wants to continue
        displayCurrentStatus()
        if not playAgain():
            break

function rollDice():
    die1 = random(1, 6)
    die2 = random(1, 6)
    total = die1 + die2
    return total

function isComeOutRoll(roll):
    return roll in [2, 3, 7, 11, 12]

function handleComeOutRoll(roll):
    if roll in [7, 11]:
        playerWins()
    elif roll in [2, 3, 12]:
        playerLoses()
    else:
        point = roll
        displayPointMessage(point)
        handlePointRoll(point)

function handlePointRoll(point):
    while true:
        roll = rollDice()

        if roll == point:
            playerWins()
            break
        elif roll == 7:
            playerLoses()
            break

function playerWins():
    displayWinMessage()

function playerLoses():
    displayLoseMessage()

function displayPointMessage(point):
    // Display the point for the current round

function displayWinMessage():
    // Display a message indicating the player has won

function displayLoseMessage():
    // Display a message indicating the player has lost

function displayCurrentStatus():
    // Display the current status of the game

function playAgain():
    // Ask the player if they want to play again
    // Return True if the player wants to play again, False otherwise

```

## Flowchart {#sec-flowchart}

Create a flowchart illustrating how the game unfolds, using the function names provided in the ChatGPT code. 
Include this as a PNG file in the repository and link to it here.

![Craps Game Flowchart](flowchart.png)

## Single game data structure {#sec-single-game-data}

It's one thing to write a set of instructions/pseudocode for how to *play* a game, but it's a separate task to figure out how to **computationally simulate** the game. 
For instance, in a simulation you often need to keep track of each move, and then compute summary statistics about the game to use when compiling simulation data.

Draw/sketch a tabular data structure that can store the results as you progress through a single game of craps. Keep track of how many times you've rolled the dice.
What additional columns do you need? 
Hint: Each roll of the 2 dice should be a row.

Each row represents the results of a single game of Craps.

| **Column Name**    | **Data Type** | **Description**                                      |
|--------------------|---------------|------------------------------------------------------|
| **GameID**         | Integer       | Unique identifier for the game instance              |
| **ComeOutRoll**    | Integer       | First roll of the game (come-out roll)               |
| **Result**         | String        | Outcome of the game (e.g., "Win" or "Lose")          |
| **Point**          | Integer       | The point value set during the game (if applicable)  |
| **TotalRolls**     | Integer       | Total number of rolls made during the game           |
| **WinningRoll**    | Integer       | Roll that led to winning, if applicable              |
| **LosingRoll**     | Integer       | Roll that led to losing, if applicable               |
| **EndRollSequence**| String        | Sequence of rolls leading to the game’s conclusion   |
| **PlayDuration**   | Float         | Duration of the game in seconds (optional)           |
| **PlayAgain**      | Boolean       | Indicator if the player chose to play another round  |


## Summary data structure {#sec-game-summary-data}

Draw/sketch a summary tabular data structure to store summary information from a single game of craps.    
Hint: Each game of craps should yield a single row in your table.

| GameID | ComeOutRoll | Result | Point | TotalRolls | WinningRoll | LosingRoll | EndRollSequence | PlayDuration | PlayAgain |
|--------|-------------|--------|-------|------------|-------------|------------|-----------------|--------------|-----------|
| 1      | 7           | Win    | -     | 1          | 7           | -          | "7"             | 5.3          | True      |
| 2      | 8           | Lose   | 8     | 4          | -           | 7          | "8, 5, 6, 7"    | 12.1         | False     | 

# Simulating a game of craps {#sec-simulation-pseudocode}

In this part of the assignment, you'll spend the time figuring out how to implement craps as a computational simulation by adapting the ChatGPT pseudocode. 
Your code structure will be different from ChatGPT's structure because you are going to generate data to estimate various conditional probabilities.

**Requirement 1:**    
You must have a function to simulate a single craps game, `simulate_craps_game`, which returns a data frame with at least the following columns: 

- `id` (# times the dice has been rolled)
- `roll` (the total roll of the dice)
- `outcome` (win, loss, or continue)

You may have additional columns if you want.

**Requirement 2:**    
You must include a summary function named `summarize_craps_game` that takes the data frame returned by `simulate_craps_game` and generates a single row with the following columns:

- `n_rolls`, the number of times the dice were rolled in the game,
- `outcome`, whether the game was won or lost
- `point`, the total of the dice on the first roll, if the game continued past the first roll, and NA otherwise.

**Requirement 3:**    
You must include a function to run your simulation, `run_craps_simulation(N)` that takes a single integer argument `N` which determines the number of games which will be played. 

Think carefully about how you want to structure your code - do you want to return the full results for each game and then summarize, or do you want to summarize before you return the full results?


## Planning Helper Functions {#sec-helper}

Consider helper functions you will need to write to implement the game of craps. 
For each function, define the input, output, and provide a comment to explain what the function will do.

Here is pseudocode for a function that simulates the roll of the dice in craps to demonstrate the required format.

```
roll_dice <- function() {
  # Input: None
  # Output: an integer from 1:12
  # Description: Generate 2 random integers from 1 to 6 and sum them
}
```

Put each function in a separate code block.

```{r}
roll_dice <- function() {
  # Input: None
  # Output: an integer between 2 and 12
  # Description: Simulates a roll of two six-sided dice, returning the sum
}
```

```{r}
is_come_out_roll <- function(roll) {
  # Input: roll - an integer between 2 and 12
  # Output: Boolean (TRUE if the roll is a come-out roll; FALSE otherwise)
  # Description: Checks if the roll is a come-out roll (either win, loss, or sets a point)
}
```

```{r}
determine_come_out_outcome <- function(roll) {
  # Input: roll - an integer between 2 and 12
  # Output: Character ("win", "loss", or "continue")
  # Description: Determines the outcome of the come-out roll
}
```



## Planning Main Functions {#sec-main-function-diagram}

Update your flowchart from @sec-flowchart to match the requirements of this section. 
Your flowchart should have separate blocks for each function. 
Which helper function(s) will be called inside each required function?

![Detailed Craps Game Simulation Flowchart](flowchart3.png)

## Simulating a full game {#sec-game-pseudocode}

Fill in the pseudocode below to specify how you would return the single game data structure you created in @sec-single-game-data above. 
Remember to fill in the input parameter inside the function definition as well as the comment.

```
simulate_craps_game <- function() {
  # Input: 
  # Output: 
  # Description:
}
```
```{r}
simulate_craps_game <- function() {
  # Input: None
  # Output: Data frame containing columns: id, roll, outcome
  # Description: Simulates a single game of Craps, returning a data frame 
  #              that tracks each roll, its total, and the game outcome
}
```


## Summarizing a game {#sec-game-summary-pseudocode}

Add a function that summarizes a game of craps (e.g. go from the data structure in @sec-single-game-data to the data structure in @sec-game-summary-data).

```
summarize_craps_game <- function() {
  # Input: 
  # Output: 
  # Description:
}
```
```{r}
summarize_craps_game <- function(game_data) {
  # Input: game_data - Data frame from simulate_craps_game
  # Output: Data frame with summary columns: n_rolls, outcome, point
  # Description: Summarizes a single game’s data, returning a single-row data frame
}
```


## Simulating many games {#sec-game-simulation-pseudocode}

```
run_craps_simulation <- function(N) {
  # Input: an integer N which determines the number of games to simulate
  # Output: 
  # Description:
}
```
```{r}
run_craps_simulation <- function(N) {
  # Input: N - Integer specifying the number of games to simulate
  # Output: Data frame with summary information for each game
  # Description: Runs N games of Craps, summarizing each game and compiling results
}
```


## Planning for implementation

What parts are still missing for you to write code implementing craps based on your pseudocode? 

* Inside the function, I need to define loops to continue the process.

* I need to connect all the functions to get the output. 

* I need to use 'rbind()' funtion to get a dataframe as an output.

What do you expect you will need to do before/during the coding process?

* It am planning to type each funtion in seperate chunks and to run each one seperately to make sure there's no any debugging.

Make a plan for next week's work. Where will you start?

* I will start by constructing the helper functions first.

## References

For the flow chart : 

[Helpful flowchart](https://www.crashwhite.com/introcompsci/materials/presentations/grfx/craps_flowchart.graffle.pdf)
